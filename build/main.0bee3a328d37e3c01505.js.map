{"version":3,"sources":["webpack:///./js/exercise1.js","webpack:///./js/exercise2.js","webpack:///./js/exercise3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","updatedUsers","table","toggleUserState","allUsers","userName","map","user","makeTransaction","transaction","reject","min","max","Math","floor","random","canProcess","id","logSuccess","logError","warn","amount","catch"],"mappings":"0HAAMA,EAAQ,SAAAC,GAEV,OAAO,IAAIC,SAAQ,SAAAC,GACfC,YAAW,WACTD,EAAQF,KACPA,OAIHI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCdbK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBP,EAAS,SAAAQ,GAAY,OAAIN,QAAQO,MAAMD,IAEzCE,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIf,SAAQ,SAAAC,GACjBA,EACEa,EAASE,KAAI,SAAAC,GAAI,OACfA,EAAKR,OAASM,EAAd,iBAA8BE,EAA9B,CAAoCP,QAASO,EAAKP,SAAWO,UAMrEJ,EAAgBL,EAAO,SAASD,KAAKJ,GACrCU,EAAgBL,EAAO,OAAOD,KAAKJ,GCpBnC,IAIQe,EAAkB,SAAAC,GACtB,OAAO,IAAInB,SAAQ,SAACC,EAASmB,GAC3B,IAN6BC,EAAKC,EAM5BxB,GANuBuB,EAMW,IANNC,EAMW,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAM5CK,EAAaH,KAAKE,SAAW,GACnCvB,YAAW,WACLwB,EACFzB,EAAQ,CAAE0B,GAAIR,EAAYQ,GAAIvB,KAAMN,IAEpCsB,EAAOD,EAAYQ,MAEpB7B,OAID8B,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAIvB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8CvB,EAA9C,OAGIyB,EAAW,SAAAF,GACftB,QAAQyB,KAAR,gCAA6CH,EAA7C,8BAGFT,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GAAYI,MAAMH,GAE1BX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GAAYI,MAAMH,GAE1BX,EAAgB,CAAES,GAAI,GAAII,OAAQ,KAC/BxB,KAAKqB,GAAYI,MAAMH,GAE1BX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GAAYI,MAAMH,K","file":"main.0bee3a328d37e3c01505.js","sourcesContent":["const delay = ms => {\n    // Твой код\n    return new Promise(resolve => {\n        setTimeout(() => {\n          resolve(ms);\n        }, ms);\n      });\n  };\n  \n  const logger = time => console.log(`Resolved after ${time}ms`);\n  \n  // Вызовы функции для проверки\n  delay(2000).then(logger); // Resolved after 2000ms\n  delay(1000).then(logger); // Resolved after 1000ms\n  delay(1500).then(logger); // Resolved after 1500ms\n\n\n\n  ","const users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n  ];\n  \n  const logger = updatedUsers => console.table(updatedUsers);\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise(resolve => {\n    resolve(\n      allUsers.map(user =>\n        user.name === userName ? { ...user, active: !user.active } : user,\n      ),\n    );\n  });\n};\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n","const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n  \n  const makeTransaction = transaction => {\n    return new Promise((resolve, reject) => {\n      const delay = randomIntegerFromInterval(200, 500);\n      const canProcess = Math.random() > 0.3;\n      setTimeout(() => {\n        if (canProcess) {\n          resolve({ id: transaction.id, time: delay });\n        } else {\n          reject(transaction.id);\n        }\n      }, delay);\n    });\n  };\n  \n  const logSuccess = ({ id, time }) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n  };\n  \n  const logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n  };\n  \n  makeTransaction({ id: 70, amount: 150 })\n    .then(logSuccess).catch(logError);\n  \n  makeTransaction({ id: 71, amount: 230 })\n    .then(logSuccess).catch(logError);\n  \n  makeTransaction({ id: 72, amount: 75 })\n    .then(logSuccess).catch(logError);\n  \n  makeTransaction({ id: 73, amount: 100 })\n    .then(logSuccess).catch(logError);\n  "],"sourceRoot":""}